// Autogenerated from Pigeon (v1.0.8), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "bridge.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}


@interface WifiConnectorHostApiBridgeCodecReader : FlutterStandardReader
@end
@implementation WifiConnectorHostApiBridgeCodecReader
@end

@interface WifiConnectorHostApiBridgeCodecWriter : FlutterStandardWriter
@end
@implementation WifiConnectorHostApiBridgeCodecWriter
@end

@interface WifiConnectorHostApiBridgeCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation WifiConnectorHostApiBridgeCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[WifiConnectorHostApiBridgeCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[WifiConnectorHostApiBridgeCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *WifiConnectorHostApiBridgeGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    WifiConnectorHostApiBridgeCodecReaderWriter *readerWriter = [[WifiConnectorHostApiBridgeCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void WifiConnectorHostApiBridgeSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<WifiConnectorHostApiBridge> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.WifiConnectorHostApiBridge.connect"
        binaryMessenger:binaryMessenger
        codec:WifiConnectorHostApiBridgeGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(connectSsid:completion:)], @"WifiConnectorHostApiBridge api (%@) doesn't respond to @selector(connectSsid:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_ssid = args[0];
        [api connectSsid:arg_ssid completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.WifiConnectorHostApiBridge.secureConnect"
        binaryMessenger:binaryMessenger
        codec:WifiConnectorHostApiBridgeGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(secureConnectSsid:password:completion:)], @"WifiConnectorHostApiBridge api (%@) doesn't respond to @selector(secureConnectSsid:password:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_ssid = args[0];
        NSString *arg_password = args[1];
        [api secureConnectSsid:arg_ssid password:arg_password completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.WifiConnectorHostApiBridge.connectByPrefix"
        binaryMessenger:binaryMessenger
        codec:WifiConnectorHostApiBridgeGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(connectByPrefixSsidPrefix:completion:)], @"WifiConnectorHostApiBridge api (%@) doesn't respond to @selector(connectByPrefixSsidPrefix:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_ssidPrefix = args[0];
        [api connectByPrefixSsidPrefix:arg_ssidPrefix completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.WifiConnectorHostApiBridge.disconnect"
        binaryMessenger:binaryMessenger
        codec:WifiConnectorHostApiBridgeGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disconnectWithCompletion:)], @"WifiConnectorHostApiBridge api (%@) doesn't respond to @selector(disconnectWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api disconnectWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.WifiConnectorHostApiBridge.isEnabled"
        binaryMessenger:binaryMessenger
        codec:WifiConnectorHostApiBridgeGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isEnabledWithError:)], @"WifiConnectorHostApiBridge api (%@) doesn't respond to @selector(isEnabledWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api isEnabledWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.WifiConnectorHostApiBridge.getSSID"
        binaryMessenger:binaryMessenger
        codec:WifiConnectorHostApiBridgeGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getSSIDWithError:)], @"WifiConnectorHostApiBridge api (%@) doesn't respond to @selector(getSSIDWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSString *output = [api getSSIDWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
