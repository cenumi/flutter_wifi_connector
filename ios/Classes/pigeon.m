// Autogenerated from Pigeon (v0.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString*, id>* wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}


@interface NativeApiCodecReader : FlutterStandardReader
@end
@implementation NativeApiCodecReader
@end

@interface NativeApiCodecWriter : FlutterStandardWriter
@end
@implementation NativeApiCodecWriter
@end

@interface NativeApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation NativeApiCodecReaderWriter
- (FlutterStandardWriter*)writerWithData:(NSMutableData*)data {
  return [[NativeApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader*)readerWithData:(NSData*)data {
  return [[NativeApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec>* NativeApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec* s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    NativeApiCodecReaderWriter* readerWriter = [[NativeApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void NativeApiSetup(id<FlutterBinaryMessenger> binaryMessenger, id<NativeApi> api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NativeApi.connect"
        binaryMessenger:binaryMessenger
        codec:NativeApiGetCodec()];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSString *input = message;
        [api connect:input completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NativeApi.connectByPrefix"
        binaryMessenger:binaryMessenger
        codec:NativeApiGetCodec()];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSString *input = message;
        [api connectByPrefix:input completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NativeApi.disconnect"
        binaryMessenger:binaryMessenger
        codec:NativeApiGetCodec()];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api disconnect:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NativeApi.getSSID"
        binaryMessenger:binaryMessenger
        codec:NativeApiGetCodec()];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSString *output = [api getSSID:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.NativeApi.getGatewayIP"
        binaryMessenger:binaryMessenger
        codec:NativeApiGetCodec()];
    if (api) {
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSString *output = [api getGatewayIP:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
